WEBVTT


00:00:00.077 --> 00:00:02.077
We already know.

00:00:02.761 --> 00:00:09.761
Since your turn is very late, you already know Python Basics, Git Basics, Docker basics, Linux deployment.

00:00:09.814 --> 00:00:12.814
CICD, all of that stuff, right?

00:00:13.347 --> 00:00:16.347
So I'll just quickly jump, you know, I'll just jump into that here.

00:00:16.733 --> 00:00:23.733
Quite invites. We'll try to cover everything from just one problem, but actually, you don't need to, um, worry about syntax or, uh…

00:00:23.977 --> 00:00:28.977
Um, like, the terminologies, you just have to explain your logic, and just…

00:00:29.430 --> 00:00:34.430
your concepts. Just your thoughts, right? If you want, you can write, but totally optional.

00:00:35.829 --> 00:00:39.829
So… okay, let's say there's a string, right?

00:00:40.564 --> 00:00:42.564
dinner string.

00:00:43.480 --> 00:00:45.480
And this string is something like, for example,

00:00:46.607 --> 00:00:48.607
like, E?

00:00:49.250 --> 00:00:51.250
D, right?

00:00:51.673 --> 00:00:53.673
B…

00:00:56.795 --> 00:00:58.795
Maybe?

00:00:58.839 --> 00:01:01.839
Okay. And, um…

00:01:05.781 --> 00:01:07.781
Z, and underscore.

00:01:15.110 --> 00:01:17.110
Now, uh, this string…

00:01:17.570 --> 00:01:19.570
can contain any letters from A to…

00:01:20.668 --> 00:01:24.668
It was it, and this string can contain underscores.

00:01:26.311 --> 00:01:28.311
Okay. So…

00:01:28.816 --> 00:01:35.816
The output, like, for example, you need to discuss a logic that actually processes the string.

00:01:36.222 --> 00:01:42.222
And generates an output like this. So, for example, it gives you back a list of numbers.

00:01:43.090 --> 00:01:48.090
There can be one item or more, right? But, like, for example, let's meant to do something like this.

00:01:48.072 --> 00:01:50.072
For example, one…

00:01:51.756 --> 00:01:53.756
Don't know.

00:01:55.091 --> 00:01:57.091
3. Como.

00:01:59.781 --> 00:02:02.781
26. So, for example, like, uh…

00:02:03.085 --> 00:02:08.085
A is run, B is 2, C is 3, and I think Z is 26.

00:02:08.808 --> 00:02:11.808
If you… notify? 24.

00:02:12.455 --> 00:02:18.455
26. Yeah, right? A, B, C, D, E, T, H, I, H, J.

00:02:27.271 --> 00:02:30.271
Right? So anyways, let me just double-check, right?

00:02:30.430 --> 00:02:32.430
So…

00:02:36.746 --> 00:02:38.746
Z?

00:02:40.575 --> 00:02:42.575
So it is…

00:02:47.991 --> 00:02:50.991
So it is the 26th Street in the series.

00:02:52.031 --> 00:02:55.031
Okay, so once you are done with that, right, if you're done with that, for example,

00:02:55.011 --> 00:02:57.011
then, uh…

00:02:58.650 --> 00:03:03.650
Um, anyways, I will give you a bonus. Like, how we do… how would you use Python?

00:03:03.992 --> 00:03:07.992
To identify that Z is 26, or says something that you can do.

00:03:08.776 --> 00:03:11.776
Right? Anyways, so 1,326 stop.

00:03:14.183 --> 00:03:16.183
Okay, so…

00:03:16.631 --> 00:03:21.631
Okay, now take your time first. Yes, you can ask questions first. Okay, first, let me see, uh, let me…

00:03:22.721 --> 00:03:31.721
Like, let me ask you if I… if what's on my mind is correct or not. So you want me to turn on this list of strings into a… so this string into a list of numbers.

00:03:31.710 --> 00:03:33.710
And, uh, depending on the…

00:03:34.150 --> 00:03:39.150
where it's placed in the alphabet, you give the corresponding number, right? Well…

00:03:39.469 --> 00:03:42.469
I just… I can just tell you that A is 1.

00:03:42.802 --> 00:03:44.802
And Z is 26, right? Okay.

00:03:45.097 --> 00:03:53.097
So, REST, you have to figure out, like, of course, it's not just, like, simple mapping of numbers. Okay, so it's not alphabet… it's not alphabetical order.

00:03:53.752 --> 00:04:03.752
And that's it. That's why you take your time. Think about, like, how… like, okay, so you have seen those sequence problems, where what comes after this, so you have to just figure out, like, how.

00:04:04.587 --> 00:04:07.587
How, actually, if A is one, right?

00:04:08.340 --> 00:04:10.340
You see one here, right? But then…

00:04:11.335 --> 00:04:15.335
You see the A here, but there's no one here. Oh, that's because this is 2.

00:04:15.862 --> 00:04:18.862
But when you see B's 2, then there's no 2 here, right?

00:04:19.588 --> 00:04:23.588
But then there's, like, there's Z, there's 26, yes, underscore is 0.

00:04:24.744 --> 00:04:26.744
A is one…

00:04:27.737 --> 00:04:29.737
Z is 26, underscore a Z.

00:04:30.979 --> 00:04:32.979
Okay. Just take your time.

00:04:35.031 --> 00:04:39.031
Right? And just, uh, take, take 2-5 minutes, whatever you like, right?

00:04:39.117 --> 00:04:42.117
then we will… if you want to do some rough work, you can…

00:05:15.234 --> 00:05:18.234
So the output of this should be 1326.

00:05:18.656 --> 00:05:23.656
The output of this… If you want, I can put some node strings, maybe some more cases, right?

00:05:23.770 --> 00:05:25.770
Maybe a simple one first.

00:05:26.573 --> 00:05:28.573
Let me put a simple one also, here.

00:05:29.643 --> 00:05:32.643
So you can do the work here. Let's say there's another string.

00:05:33.493 --> 00:05:36.493
And let's do a very simple one. So…

00:05:36.750 --> 00:05:38.750
A, again, A.

00:05:38.736 --> 00:05:40.736
And B?

00:05:41.532 --> 00:05:43.532
Uh, and, uh, let's say…

00:05:45.204 --> 00:05:48.204
Same thing, right, but just this is a small string, no underscores.

00:05:48.433 --> 00:05:50.433
So, the output would be a 1.

00:05:52.718 --> 00:05:54.718
Wait, and uh…

00:05:54.888 --> 00:05:56.888
then it would be, uh…

00:05:56.876 --> 00:05:58.876
3.

00:05:58.988 --> 00:06:02.988
just part of it, right? For this one. Okay, if you go even smaller,

00:06:05.707 --> 00:06:07.707
then the output would be just one.

00:06:08.885 --> 00:06:11.885
Uh, if you can see this and this and…

00:06:12.103 --> 00:06:14.103
think of a pattern, right?

00:06:14.252 --> 00:06:16.252
then come up with.

00:06:33.246 --> 00:06:35.246
You can ask questions, anything.

00:06:44.065 --> 00:06:46.065
Okay, so…

00:06:46.177 --> 00:06:48.177
AA gives you one. Hmm.

00:06:48.230 --> 00:06:51.230
But AA, B, AB gives you 3.

00:06:52.183 --> 00:06:55.183
BAB gives you 3. If you just…

00:06:55.582 --> 00:06:57.582
put AA, yeah.

00:06:57.640 --> 00:06:59.640
Then…

00:07:00.209 --> 00:07:03.209
And then this… But if you think about it, AA always gives you always one.

00:07:03.738 --> 00:07:07.738
Yeah, but A is one, right? Yes. Like, there are two ones, actually.

00:07:08.909 --> 00:07:13.909
So, maybe that one means something. Okay, what threw me off is this one. Zed and…

00:07:14.696 --> 00:07:20.696
The… let's forget about Zed for now. No, if I… okay, if, uh, what came into my mind the first thing is…

00:07:21.394 --> 00:07:26.394
If A is 1 and AA gives you 1, and AABAB gives you 3.

00:07:27.013 --> 00:07:31.013
You take the first two characters, you multiply them, you get one.

00:07:31.629 --> 00:07:33.629
Or maybe, let's say, some…

00:07:34.223 --> 00:07:36.223
Or, no, not some, because A's…

00:07:37.476 --> 00:07:42.476
Phase 1. Like, for example, AB, A plus B is 3, right? Yes. And this A is when…

00:07:44.366 --> 00:07:46.366
No, but like…

00:07:47.103 --> 00:07:50.103
If it's… if you just take these three characters, B…

00:07:50.584 --> 00:07:55.584
B… B is 2, I have an transfer. Okay, let's do… let's zoom in later.

00:07:56.719 --> 00:08:00.719
Okay, let's… okay, let… you know what, like, ignore these…

00:08:01.378 --> 00:08:03.378
characters for now, for example.

00:08:03.757 --> 00:08:08.757
And then think of some ways, like, A is 1, and A is B. AB is 3.

00:08:09.288 --> 00:08:14.288
So, there is something we might not… Okay, I think maybe I… maybe I understood it.

00:08:14.509 --> 00:08:16.509
Let me see… take your time.

00:08:18.685 --> 00:08:20.685
Yeah, so… influence.

00:08:26.345 --> 00:08:28.345
Now, this one's working, because that's…

00:08:31.356 --> 00:08:33.356
Toy…

00:08:35.715 --> 00:08:37.715
What is ABH? Okay, wait.

00:08:42.826 --> 00:08:47.826
And then these… Okay, I think I got this. This one's gonna give it off.

00:08:49.121 --> 00:08:51.121
3 months, 26, 0…

00:08:51.874 --> 00:08:57.874
Year 26. So, you want me to write a logic? Just tell me, just go through the logic, it's fine. Okay, so…

00:08:59.809 --> 00:09:01.809
You ignore the first character?

00:09:02.039 --> 00:09:07.039
then you take the value of the character itself, so A is 1.

00:09:07.763 --> 00:09:11.763
then you ignore the other car… the next character over here.

00:09:12.085 --> 00:09:17.085
And then take the two adjacent values, and add them together to get 3.

00:09:17.260 --> 00:09:23.260
Then again, uh… This time, you will, uh, you will take the thi…

00:09:23.911 --> 00:09:29.911
Uh, no, wait, why? Yes, because the pattern mismatch… because… now, you're very close, but should we ignore…

00:09:31.187 --> 00:09:41.187
Or every time one character… No, no, no, no. Tell us how many characters to ignore. Uh, each time you ignore a character, you increase the amount of characters you take. Okay. Give me an example.

00:09:41.230 --> 00:09:47.230
for this example, your logic is fine, right? Like, I mean, it looks like this, right? But there can be…

00:09:47.509 --> 00:09:49.509
Uh, something like this.

00:09:52.309 --> 00:09:55.309
Great. And the output would be 111111.

00:09:57.071 --> 00:10:01.071
Okay, one more, maybe that will finalize… finally help you.

00:10:01.591 --> 00:10:03.591
let's say B?

00:10:03.578 --> 00:10:08.578
BB and B, B, B, and B, B, P, for example.

00:10:08.663 --> 00:10:10.663
So, here you have…

00:10:11.827 --> 00:10:13.827
Full, full, and full.

00:10:14.697 --> 00:10:16.697
Maybe now you will be able to take care of it.

00:10:19.735 --> 00:10:22.735
Okay, let's try the thing in my mind a bit.

00:10:32.791 --> 00:10:34.791
Unless to…

00:10:38.561 --> 00:10:40.561
And we need this person.

00:10:43.074 --> 00:10:45.074
Is it…?

00:10:49.093 --> 00:10:51.093
Oh, okay, so…

00:10:51.825 --> 00:10:53.825
Since this is 2, you're gonna keep these two.

00:10:54.433 --> 00:10:57.433
This is 2, you're gonna keep these two. Two, you're gonna keep these two.

00:10:58.472 --> 00:11:00.472
Yes.

00:11:00.946 --> 00:11:02.946
That's it.

00:11:03.880 --> 00:11:05.880
I should get it even.

00:11:06.520 --> 00:11:13.520
So there's actually, uh, again, just, just a disclosure, right? So, I wanted to make this interview, like, a bit…

00:11:14.586 --> 00:11:17.586
like, a bit realistic for you, but not further for others.

00:11:17.910 --> 00:11:19.910
Maximum number, minimum, and…

00:11:20.189 --> 00:11:24.189
Some repetitions is all I did, right? But actually, yeah, so…

00:11:24.447 --> 00:11:28.447
I won't ask any Python basics. I will give you a bonus on this.

00:11:29.386 --> 00:11:31.386
But this is a question asked in a, like a…

00:11:31.849 --> 00:11:36.849
There was someone who gave a test in a German company.

00:11:37.953 --> 00:11:39.953
So, this was the interview question.

00:11:40.514 --> 00:11:43.514
I figured out very quickly. He took 4 hours.

00:11:44.152 --> 00:11:50.152
Actually, he took 4 hours because writing in the code is not that easy. When you write the code for it, it's not that easy.

00:11:51.050 --> 00:11:53.050
LLM cannot write the code for it, it will fail.

00:11:53.305 --> 00:11:57.305
When you try to explain the logic. Okay, anyway, that's good, right? So…

00:11:58.077 --> 00:12:01.077
Uh, let's move forward, right, Derek? And…

00:12:02.164 --> 00:12:05.164
Uh, for example, whatever you have learned so far.

00:12:05.674 --> 00:12:07.674
Right? Whatever you learn from the training, right?

00:12:08.379 --> 00:12:13.379
Uh, especially when it comes to containerization, deployment, CICD.

00:12:13.949 --> 00:12:15.949
Uh, right? So, um…

00:12:16.754 --> 00:12:18.754
I mean, ugh…

00:12:19.279 --> 00:12:23.279
let's say you have an application, right? I will give you a custom application here.

00:12:24.835 --> 00:12:26.835
And this application is a simple…

00:12:27.717 --> 00:12:30.717
For example, let's say, uh, you know, there is an application called Obsidian.

00:12:31.016 --> 00:12:34.016
Obsidian. It's actually available, it's there.

00:12:35.244 --> 00:12:40.244
Well, you can check it out. Something like Obsidian, it's a note-taking application, actually. Very simple.

00:12:41.272 --> 00:12:43.272
what people can do, people can log in,

00:12:43.311 --> 00:12:46.311
People can actually… different people can sign up.

00:12:46.696 --> 00:12:50.696
And they can just create their notes, they have a vault, they can just put their notes.

00:12:50.938 --> 00:12:55.938
Uh, the good thing is that it exposes an API, so people can actually fetch the nodes.

00:12:56.069 --> 00:12:58.069
programmatically automate things, right?

00:12:58.907 --> 00:13:00.907
That is the only difference, but it's simply a note-taking application.

00:13:02.019 --> 00:13:04.019
Now, based on all of the knowledge you have acquired, right,

00:13:04.097 --> 00:13:07.097
How would you start from, uh, like,

00:13:07.721 --> 00:13:14.721
planning… let's say you have a couple of team members, two or three, right? Uh, let us start from the planning phase. Like, how would you plan to build this product?

00:13:16.156 --> 00:13:19.156
Then, for example, once you build this product, how are you planning to, for example,

00:13:19.319 --> 00:13:25.319
release the MVP, and then how are you going to make sure that adding future features

00:13:25.387 --> 00:13:31.387
is easy to do. And make sure the product stays stable. How do you make sure

00:13:31.900 --> 00:13:35.900
It stays scalable. It is scalable. Like, there's something called

00:13:36.474 --> 00:13:41.474
impossible to scale, unless you rewrite the product. And there's a product that is… that is, yes,

00:13:42.287 --> 00:13:47.287
right now, maybe just, uh, small, but you can scale it if you want. So just…

00:13:48.287 --> 00:13:53.287
just… if you want to draw your thought process or share it, or if you want me to draw it, your choice, right?

00:13:53.271 --> 00:13:55.271
Like, from the beginning, from the planning phase,

00:13:55.764 --> 00:13:57.764
to the development phase, right? To the…

00:13:58.492 --> 00:14:02.492
deployment phase, right? Testing phase, right? Like, monitoring phase.

00:14:02.985 --> 00:14:05.985
Everything. The whole CICD.

00:14:06.962 --> 00:14:12.962
So… Life second, kind of, yes, or you can say that is also part of, like, DevOps cycle that you have seen, right?

00:14:13.414 --> 00:14:16.414
So, how would you do it? Based on the knowledge that you have?

00:14:17.169 --> 00:14:19.169
Okay, first of all…

00:14:19.942 --> 00:14:25.942
I would check with the client the requirements. Let's say… let's say I will give you the requirement, right? Very simple.

00:14:26.535 --> 00:14:40.535
I want people to be able to use your API, right? To be able to just create readily, create notes, update notes, delete… But how many users would use that program? That's the… Can any number of users, let's say right now… right now, you just have to worry about 50, not more like that.

00:14:41.176 --> 00:14:43.176
10 to 50 or so.

00:14:43.507 --> 00:14:48.507
So, like, how would you start, like, building the application? You can share your thoughts also.

00:14:49.655 --> 00:14:51.655
What will you keep in mind?

00:14:51.731 --> 00:14:53.731
When you do that, right?

00:14:55.508 --> 00:14:57.508
Okay, first of all, uh…

00:14:57.973 --> 00:14:59.973
Uh, you said I have a team member of…

00:15:00.370 --> 00:15:06.370
Let's say you have two more team members, right? You have to speed up work. Okay. By the way, you can assume things yourself.

00:15:07.159 --> 00:15:12.159
You have to just increase the throughput and make sure the product is stable and it's scalable, and code is maintained.

00:15:13.318 --> 00:15:17.318
That's very brutal. Now, there are no right or wrong answers. There can be, like, different…

00:15:17.864 --> 00:15:23.864
Many solutions? You mean different approaches? There are many approaches. Some are good approaches, some might contribute. Okay.

00:15:24.028 --> 00:15:30.028
So, in my mind, if I, like, had this kind of project, first of all,

00:15:30.751 --> 00:15:39.751
As I told you, I would see the amount of users that are going to use the… Let's say, right now, right now, 10… Okay. And, you know, they're not going to increase

00:15:40.337 --> 00:15:45.337
very soon, it will take time. Okay, so… first of all, I start with the…

00:15:45.538 --> 00:15:50.538
let's say, making the program. Okay. Uh, selecting the…

00:15:52.012 --> 00:15:57.012
Not just a programming language. Can you just write, like, 10 users, and then the programming languages? Just something, so…

00:15:57.073 --> 00:15:59.073
we… we can just visualize later.

00:16:00.741 --> 00:16:05.741
search and users, and what language would you select, and, like, how would you start the work? I mean…

00:16:06.430 --> 00:16:12.430
If it's just 10 users, and it's a simple program, you can use Python, and you can use Feist API.

00:16:19.089 --> 00:16:22.089
Uh, also, before… okay, let…

00:16:22.805 --> 00:16:26.805
Okay, Python Fast API. You create the API,

00:16:27.564 --> 00:16:30.564
Okay, now, what are you… when you're creating the API, right?

00:16:31.330 --> 00:16:34.330
Like, uh, if, let's say, you want to distribute the word.

00:16:35.509 --> 00:16:39.509
And you have to, for example, so one person actually handles the

00:16:39.928 --> 00:16:42.928
Because you are going to store. Oh, yes, uh, so…

00:16:43.518 --> 00:16:45.518
create a repository?

00:16:46.107 --> 00:16:49.107
GitHub? Yeah, GitHub. GitHub rep. That's right, right, everything, right.

00:16:49.328 --> 00:16:51.328
GitHub?

00:16:51.609 --> 00:16:53.609
GitHub will host…

00:16:54.259 --> 00:16:56.259
The…

00:16:56.995 --> 00:16:58.995
Okay, the application itself? Okay.

00:17:00.071 --> 00:17:05.071
And… after creating the application, let's say you work with a team. Yeah.

00:17:05.334 --> 00:17:09.334
you set up, uh, code owners, everything, GitHub-related?

00:17:09.757 --> 00:17:12.757
Uh, after you're done with this part…

00:17:13.542 --> 00:17:16.542
let's say you have to… okay, Python test API.

00:17:17.542 --> 00:17:19.542
Now, remember, our goal is to actually

00:17:19.650 --> 00:17:21.650
Does the application feature by feature?

00:17:22.449 --> 00:17:26.449
And, uh, at least what you can do, you can at least give the first flight.

00:17:27.458 --> 00:17:30.458
an MVP, minimum viable product, with the limited set of features, at least, right?

00:17:30.760 --> 00:17:36.760
Okay, maybe create and delete notes, for now. No need for… no need to support uploads.

00:17:38.310 --> 00:17:41.310
So, we'll say… let's say we have a…

00:17:41.313 --> 00:17:43.313
bunch of features.

00:17:43.403 --> 00:17:48.403
Uh, we can separate the, uh, each, maybe, team member can work on a feature.

00:17:48.397 --> 00:17:53.397
Let's say we have two, four features, like Create Notes, Update Notes, Delete Notes, and…

00:17:54.099 --> 00:17:57.099
Uh, read notes, let's say, for features.

00:17:57.876 --> 00:18:03.876
Okay, so… after creating a feature, you can test it out. Let's say you expose your API…

00:18:03.988 --> 00:18:08.988
You host your API locally, and you can use, uh, let's say…

00:18:10.778 --> 00:18:15.778
You can use either a web browser or Postman, and try to test your API. Okay.

00:18:16.478 --> 00:18:21.478
Uh, test multiple use cases, see if there are any failures, or…

00:18:22.129 --> 00:18:26.129
Anything that might happen? Just, can you write, like, test TPA also? We have that.

00:18:27.190 --> 00:18:29.190
just APIU. And in postman or anything.

00:18:31.857 --> 00:18:33.857
Postman, so right, postpone, post…

00:18:34.188 --> 00:18:36.188
Postman is a good tool to trust it, guys.

00:18:37.473 --> 00:18:39.473
You test the API, using Postman? Yeah.

00:18:40.015 --> 00:18:42.015
You push changes?

00:18:42.413 --> 00:18:45.413
if you… if you… if they're required, so you update your…

00:18:46.663 --> 00:18:51.663
base program. Uh, before doing that, if you have a simple program ready,

00:18:52.028 --> 00:19:04.028
before, like, actually stress testing the actual application, you might want to set up a Docker Compose, or a Dockerfile, depending on the scale of your API and its requirement. If you don't need

00:19:04.294 --> 00:19:13.294
Maybe you need an SQL server, maybe you don't. If you do, you might… Let's say we need… because we have to store the nodes. Okay, then you will have someone working on the SQL.

00:19:13.277 --> 00:19:21.277
And, uh, you link your application with the SQL database, and then you can set up a Docker Compose, so you can launch, uh…

00:19:22.006 --> 00:19:24.006
You write the Dockerfiles, start Docker Compose,

00:19:24.374 --> 00:19:29.374
You launch the application? Right now, everything is locally, right? Like… Yeah, everything is local right now.

00:19:29.323 --> 00:19:31.323
Uh…

00:19:32.025 --> 00:19:34.025
Then you can push the list images

00:19:33.893 --> 00:19:35.893
To Docker Hub. Okay.

00:19:36.120 --> 00:19:41.120
Uh, then after, let's say, you're past this development phase,

00:19:41.216 --> 00:19:46.216
You can go to the testing phase, so you can set up Jenkins for, uh…

00:19:47.113 --> 00:19:51.113
CICD pipelines. Uh, let's say you…

00:19:52.146 --> 00:19:58.146
You have two images on a Docker Compose file. What would be your strategy for images? Like, for example,

00:20:01.216 --> 00:20:07.216
Like, what… when… when… when are you building the image? Right now, let's say, if any developer wants, they can run Docker Compose?

00:20:07.364 --> 00:20:09.364
And they couldn't see the application, right?

00:20:09.709 --> 00:20:13.709
But, uh, for example, you're saying we will push to…

00:20:13.713 --> 00:20:17.713
program, right? So, like, the developers will just randomly push?

00:20:17.671 --> 00:20:20.671
Whenever they make a change, or is there a…

00:20:21.639 --> 00:20:28.639
a strategy to push, and when to push? It depends on the type of feature they implemented. Okay. So if it's a big feature,

00:20:30.005 --> 00:20:33.005
It requires an… if you… the application itself requires to…

00:20:33.570 --> 00:20:43.570
be upgraded to the new feature, so you can apply other changes, then you're gonna push the image. If it's a small feature and it can be implemented on any version without breaking the program. Okay.

00:20:43.934 --> 00:20:48.934
then you can just… you are talking about semantic version, right? Yes. You said we discussed, like, you release…

00:20:49.850 --> 00:20:51.850
Application version 0.0.1, maybe 1.

00:20:53.045 --> 00:20:56.045
So… so, for example, uh, now again, see?

00:20:56.586 --> 00:20:59.586
Uh, because people are working on different features, right?

00:21:00.014 --> 00:21:02.014
So, are you all going to just…

00:21:02.938 --> 00:21:07.938
do everything in the main branch, or is there any… No, you're gonna get… you're gonna have, uh, get, uh, get branch workflow.

00:21:08.718 --> 00:21:13.718
Okay, I said that you set up a Everything Git-related, so…

00:21:13.974 --> 00:21:23.974
So, code owners get branches, and you have someone managing the code and merging it to main, and people pulling from main before actually adding a new feature, and…

00:21:24.509 --> 00:21:27.509
Okay, okay, okay, go ahead. So, since now your application has a version,

00:21:27.948 --> 00:21:31.948
Your application has a Docker Compose, your application has a Docker file,

00:21:32.421 --> 00:21:38.421
Uh, you are pushing… whenever they release a feature, you push the image, right?

00:21:39.145 --> 00:21:42.145
Any naming convention that you can think of for the images?

00:21:42.363 --> 00:21:53.363
that you are pushing to DockerUp? Or do you just put the app name? No, uh, you're gonna put the app name in the version, it's version. So… So, depending on the feature size, so you're gonna start…

00:21:54.097 --> 00:22:05.097
If it's something major, you will add a one in the middle. So, basically, if it's… if you start, like, some… let's say you started with version 0.0.1, something minor, 0.02,

00:22:05.201 --> 00:22:10.201
Something major, uh, 0.1.1, or 1.0, yeah.

00:22:10.541 --> 00:22:16.541
It's actually patch minor images, so I think minor 0.1, and something major is the inside.

00:22:16.865 --> 00:22:22.865
And if you change the whole program, like, you add a… if it's not backward compatible… Yeah, if it's not backwards compatible, you're gonna other…

00:22:23.174 --> 00:22:28.174
One at the beginning. Uh, so yeah, that's the way you're gonna push the images.

00:22:28.959 --> 00:22:30.959
After that, you can set up a Jenkins.

00:22:32.085 --> 00:22:38.085
And do you… okay, for example, let's say we don't have Jenkins, we don't have CSE, right?

00:22:38.202 --> 00:22:45.202
Uh… let's say the client, or let's say client, you're hosting on-premise, right? So I give you a machine.

00:22:46.434 --> 00:22:48.434
I tell you, Tarek, this is… these are…

00:22:49.318 --> 00:22:51.318
Uh, this is the machine, right?

00:22:51.601 --> 00:22:56.601
Um, because this application should be hosted only for my office.

00:22:57.115 --> 00:22:59.115
only for my building, right?

00:23:00.038 --> 00:23:03.038
So, I give you access to this machine, right? This machine is running Ubuntu.

00:23:04.814 --> 00:23:09.814
So, do you want… I just want to ask you, like, are you okay with just one machine?

00:23:10.752 --> 00:23:18.752
But do you want a similar machine also? Depending on the scale of the… since you said it's 10 users only, one machine is enough.

00:23:19.206 --> 00:23:23.206
But if you are going to increase the amount of users… The restriction here is, as soon as you…

00:23:23.490 --> 00:23:26.490
push something, and it's available, they will start using it.

00:23:26.757 --> 00:23:31.757
Like, they will immediately start using as soon as something is live, right?

00:23:32.506 --> 00:23:39.506
Imagine they have an IT team, right? And they are continuously checking, they have a script that's checking, like, when the service is available, right?

00:23:40.122 --> 00:23:43.122
So… and this is the machine I will write prod, right?

00:23:44.232 --> 00:23:47.232
As soon as you put something that listens to put,

00:23:47.345 --> 00:23:52.345
443, for example, it will notify all of the clients that, yes, now start using it.

00:23:52.795 --> 00:23:55.795
So, do you need just this machine, or do you need…

00:23:56.985 --> 00:24:00.985
Is there any need for a similar machine with the similar specs, similar things for…

00:24:01.597 --> 00:24:10.597
So, to test, or is there not me? Like, I mean, do you need a similar machine for testing purposes, or local testing, do you think is more than enough?

00:24:11.756 --> 00:24:15.756
Uh, it's not more… okay, for 10 users, it's enough.

00:24:16.350 --> 00:24:26.350
Because local testing is more than enough, right? For 10 users. If it's a very, very small application. Okay. Okay, let's say. If you have a diff… the developers can use

00:24:26.714 --> 00:24:28.714
They're machined to test?

00:24:29.646 --> 00:24:31.646
And they could also just run a virtual machine.

00:24:32.038 --> 00:24:39.038
in the background and have it work as a testing machine. Okay, okay. So you don't need an actual… So what you're saying is you are going to create a VM?

00:24:39.471 --> 00:24:46.471
Just like the plot. The plot specifications and make it, right? Uh, and this… you will use this for?

00:24:47.150 --> 00:24:49.150
Testing purpose. Okay, nice. So, which is kind of…

00:24:49.684 --> 00:24:56.684
not exactly the same thing, but the same thing, right? So, but you are offloading it from the client, you are actually… Yeah, see, the way I understood is…

00:24:56.659 --> 00:25:01.659
you actually… by machine, you mean, like, an actual server required. Don't remember.

00:25:02.342 --> 00:25:07.342
that, uh, this is going… here, the data's different, you're testing data might be different, right?

00:25:08.275 --> 00:25:12.275
Because the customers have a very different kind of dataset, different kinds of nodes.

00:25:12.583 --> 00:25:18.583
Maybe with Arabic characters, maybe with Unicode characters, right? And you might be testing on something like text files and whatnot.

00:25:19.389 --> 00:25:24.389
the nodes. So, still, it's not… you cannot see it's exactly the same. The specs are same.

00:25:25.075 --> 00:25:27.075
But the data it is operating on is not the same.

00:25:27.580 --> 00:25:31.580
So, again, do you… do you still think it's a good idea to have, uh…

00:25:32.898 --> 00:25:35.898
ask the debtor from the client, or do you think…

00:25:36.629 --> 00:25:43.629
I mean, for this simple application, no need for… I mean, no need to do that. Usually, clients won't disclose their data, but you could…

00:25:44.462 --> 00:25:49.462
You could actually ask for some… not something similar, but what type of data they are working with? Simple?

00:25:49.833 --> 00:25:56.833
Yeah, yeah, sample data, or the data types they're working with, and you can just stress test your application using that.

00:25:56.956 --> 00:26:00.956
Okay, nice, nice. Okay, then what do you do? Okay, let's say you are here, right?

00:26:02.018 --> 00:26:04.018
Now… now what will you do? You have a VM.

00:26:04.555 --> 00:26:06.555
You have pushed…

00:26:07.998 --> 00:26:10.998
Uh, the image to Docker Hub, right? Uh, and you have a VM, right?

00:26:11.253 --> 00:26:16.253
We are… you own the VM, product is owned by the client. Now… now what are your next steps?

00:26:17.396 --> 00:26:19.396
Next steps now.

00:26:21.669 --> 00:26:23.669
deployment is unique, right? So… Yes.

00:26:24.965 --> 00:26:30.965
So you said you can't use Jenkins because it's locally? No, it was, like, your choice, right? The client doesn't know anything about

00:26:31.502 --> 00:26:35.502
like, Jenkins, but you have access to this machine. Okay, you have access to this machine.

00:26:35.596 --> 00:26:37.596
Okay.

00:26:38.330 --> 00:26:40.330
Since you have access to this machine,

00:26:41.276 --> 00:26:46.276
You can just, uh… let's say you can use Jenkins for deployment, set up CICD pipelines,

00:26:46.710 --> 00:26:51.710
And uh… every time you push a new… every time you merge,

00:26:52.423 --> 00:26:57.423
into main, uh, Jenkins will clone the repo.

00:26:58.200 --> 00:27:04.200
And then it will push the images to Docker Hub? So you're going to run Jengals here, right? Yeah, yeah.

00:27:04.147 --> 00:27:06.147
Can you write, right?

00:27:13.358 --> 00:27:15.358
So you're going to run Jenkins here?

00:27:15.889 --> 00:27:17.889
And, uh…

00:27:17.748 --> 00:27:19.748
Since, uh…

00:27:20.411 --> 00:27:23.411
Since you're not using the same network, this, uh…

00:27:23.936 --> 00:27:26.936
This has to be port-forwarded.

00:27:27.296 --> 00:27:29.296
Or you could use, uh, Cloudflare.

00:27:29.278 --> 00:27:31.278
to set up a tunnel?

00:27:31.896 --> 00:27:38.896
So you can… But this is, like, of course, you're right, because while you are saying this is because this is within the optional office network, right? Yes.

00:27:39.435 --> 00:27:43.435
Nice year. That's what I want to hear. Just right here, tunnel for Cloudflare or something.

00:27:46.658 --> 00:27:48.658
a different type of entropy, right?

00:27:49.965 --> 00:27:56.965
No one is giving… okay, I will tell you later, I will tell you later.

00:28:00.700 --> 00:28:02.700
Okay, so…

00:28:03.022 --> 00:28:09.022
Since we have the pipelines set here, okay, we're gonna… Let's say this is your Cloudflare server.

00:28:09.561 --> 00:28:12.561
So I will just write CFS log cursor Server, right?

00:28:14.960 --> 00:28:17.960
Now, you have… okay, so…

00:28:18.055 --> 00:28:20.055
You already told me about the…

00:28:20.397 --> 00:28:22.397
Genesis will do certain things.

00:28:23.288 --> 00:28:26.288
Did you also talk about the deployment part? Like, CDs remaining, right?

00:28:26.511 --> 00:28:28.511
CD? Yes, like, uh…

00:28:29.221 --> 00:28:34.221
Wherever the image is available? Yeah, whenever the image is available, it's gonna… Jenkins will also…

00:28:34.332 --> 00:28:36.332
do the CD part.

00:28:36.299 --> 00:28:38.299
Okay, so…

00:28:39.783 --> 00:28:41.783
So, okay, that's fine, right?

00:28:42.492 --> 00:28:46.492
This is your VM, right, for development. So, what would you do here?

00:28:46.900 --> 00:28:48.900
Yes, you have told me the broad part, right?

00:28:49.273 --> 00:28:51.273
Do you need another Jenkins for the…

00:28:51.643 --> 00:28:56.643
For this part, just to make sure all of your processes are working, what do you think manual is fine?

00:28:57.237 --> 00:29:00.237
Or do you think replicating the exact same thing is a good idea?

00:29:01.083 --> 00:29:13.083
Actually, it is a good idea. Replicating sync is a good idea. Yeah, because if you have a… if you have the same thing working here, and let's say the Jenkins fails or something, you can actually capture that before doing it in actual…

00:29:13.753 --> 00:29:15.753
Because you said they… they need this…

00:29:16.535 --> 00:29:23.535
24 hours. So, if something fails here, it's going to be a big, big problem. Okay, nice, right?

00:29:23.735 --> 00:29:28.735
Okay, now let's talk about your team, right? Your branch structure, you have set up your branch structure, right?

00:29:28.720 --> 00:29:33.720
Last year, and uh… people can make mistakes, you know, right? You have, uh…

00:29:33.697 --> 00:29:35.697
the main branch.

00:29:36.942 --> 00:29:41.942
And, like, the main branch is drawing on size, you have added features, features, features, right? So…

00:29:43.461 --> 00:29:47.461
Uh, like, this is your… this is, let's say, your team member here.

00:29:48.251 --> 00:29:52.251
This is a team member's PC, right? By mistake, what he did is, um…

00:29:53.474 --> 00:29:55.474
He actually merged…

00:29:56.504 --> 00:30:04.504
something by mistake, without checking out a new branch, he merged the new feature he was doing directly in the main branch, and based on your rules,

00:30:05.046 --> 00:30:07.046
you don't allow pushes.

00:30:07.136 --> 00:30:11.136
Right, to the main branch. So now, these three commits, they belong to

00:30:11.393 --> 00:30:13.393
a task that's achievable.

00:30:13.738 --> 00:30:15.738
done by the team member here, team member.

00:30:16.410 --> 00:30:18.410
So, what can he do?

00:30:18.960 --> 00:30:27.960
Let's say he comes to you, right? He asks for your help. So, what can you do to guide him? Okay. Like, how can he fix it? So, this is all in his local machine, so this is Git? Yes. Okay.

00:30:28.262 --> 00:30:31.262
So he must, to men… Bible strict. By mistake.

00:30:32.831 --> 00:30:34.831
Uh, he can actually just…

00:30:34.939 --> 00:30:42.939
See, okay, since he already has these features implemented, he can just, uh, create a branch.

00:30:43.793 --> 00:30:47.793
So, let's say F, let's say F1 branch. Okay, so get checkout.

00:30:47.930 --> 00:30:49.930
dash be a phone? Yeah, okay.

00:30:50.153 --> 00:30:57.153
Just write that phone, it's fine, like, F in Brunch, let's say, okay. Then what… then what? Okay, since he has this branch now in F1,

00:30:57.293 --> 00:31:01.293
Which is a direct copy of the main with his changes.

00:31:01.419 --> 00:31:05.419
Yeah. They can now just go back to me, he can just check out to me.

00:31:07.161 --> 00:31:13.161
And then he can either restore to previous commit, or he can just reset main.

00:31:17.768 --> 00:31:19.768
Because he has some, many times this problem.

00:31:22.507 --> 00:31:30.507
Yeah, okay, so, Tariq, uh, you know, like, for example, everything is

00:31:30.695 --> 00:31:32.695
But, like, when you're using this tunnel?

00:31:33.465 --> 00:31:39.465
So, you see, HTTPS is being used, like, HTTPS is the front-facing protocol between the client and

00:31:40.173 --> 00:31:42.173
the Cloudflare domain, right? So…

00:31:44.170 --> 00:32:01.170
like, I don't know, someone told me that HTTP is secure, someone told me, and HTTPS is more secure. Do you think this statement is true or false? Of course. So, what do you think, like, if we say HTTP versus HTTPS, what is the core difference, actually, between… Okay, HTTP?

00:32:02.062 --> 00:32:08.062
everything… everything is as is, so there's no encryption. Plain text, right? Yeah. And, uh…

00:32:07.994 --> 00:32:10.994
The difference… the key difference is once you add the…

00:32:11.459 --> 00:32:13.459
HTTPS, you're gonna get a certificate.

00:32:13.437 --> 00:32:15.437
Certificate has what?

00:32:16.145 --> 00:32:18.145
Uh, public and private key.

00:32:18.019 --> 00:32:20.019
private also? Or just…

00:32:20.796 --> 00:32:23.796
Okay, you will have… okay, you will have public and private key.

00:32:24.728 --> 00:32:26.728
you would, uh, you will share your public key,

00:32:26.933 --> 00:32:28.933
And you would have your private key with you.

00:32:29.496 --> 00:32:31.496
So, only using your own…

00:32:31.756 --> 00:32:41.756
public key, you can… Okay, so if someone sends you something with your… with the… Okay. So when I… when I… let's say, when I reach out to you, right? Like, for example, I reach out… I am…

00:32:42.294 --> 00:32:45.294
the client, right? So I reach out to this machine,

00:32:46.231 --> 00:32:48.231
And, uh, I get a certificate, right?

00:32:48.618 --> 00:32:52.618
My browser, that's a certificate. So that certificate, can it have a private key?

00:32:52.596 --> 00:32:54.596
that I already have in my browser.

00:32:55.077 --> 00:32:57.077
Our student cannot only have a public key.

00:32:57.297 --> 00:33:03.297
the certificate. Okay, the digital certificate, can it have just the public key, or can it also have the private key?

00:33:03.806 --> 00:33:07.806
Uh, yeah, okay, first you answer, then I will… Let's say, okay.

00:33:08.729 --> 00:33:10.729
you have your own public and private keeper.

00:33:11.564 --> 00:33:18.564
And the machine has its own public-private keeper. When you establish the connection, the machine will send you its own

00:33:19.024 --> 00:33:27.024
public key that you will use to encrypt, that can only be decrypted with the machines. Okay, okay. And this is actually the certificate.

00:33:27.788 --> 00:33:34.788
Yes. It has just the public key. It's fine, like, we are not here for the terminologies, right? So, certificate has the public key, so you… okay.

00:33:35.024 --> 00:33:37.024
Uh, you have… so…

00:33:37.746 --> 00:33:44.746
SSH, right? Like, uh, HTTPS also uses asymmetric key encryption, or public key cryptography, right?

00:33:45.318 --> 00:33:49.318
So, have you ever wondered, like, how SSH works? Like, just wanted to know your thoughts.

00:33:49.535 --> 00:33:53.535
How SSH works. Is it exactly the same as HTTPS?

00:33:54.016 --> 00:33:56.016
In terms of secure communication, or…?

00:33:56.460 --> 00:33:58.460
Do you think there might be something different.

00:33:59.595 --> 00:34:05.595
and SSH. From my knowledge, there is also a key… there's a key pair that's getting exchanged.

00:34:05.999 --> 00:34:10.999
Okay. But, uh, let me… let me… Okay, think about Richard. For example, here.

00:34:11.389 --> 00:34:14.389
Uh, there's person A, and there's person B, right?

00:34:15.070 --> 00:34:19.070
Both of them has public-private key pair, this also has public-private key pair, right?

00:34:20.275 --> 00:34:23.275
But you must know that these belong to the same organization.

00:34:23.984 --> 00:34:29.984
Like, you're Tarek, right? You own this PC, giving PC, and you own this Ubuntu machine. You own it, right?

00:34:30.819 --> 00:34:33.819
And both of them has public-private key pair, right?

00:34:34.298 --> 00:34:39.298
Although, that I can tell you that it exactly works like HTTPS.

00:34:39.617 --> 00:34:43.617
But the question is, is there a… is there a need for a certificate here?

00:34:44.232 --> 00:34:47.232
Or… can you do something other than the certificate?

00:34:48.800 --> 00:34:51.800
Awesome. Like, when you… when you're using SSH, have you seen any…

00:34:52.058 --> 00:34:54.058
certificate, or that sort of thing.

00:34:54.221 --> 00:34:56.221
In between.

00:34:56.938 --> 00:35:00.938
I mean, when you… when you actually establish the connection, it will ask you for a password.

00:35:01.340 --> 00:35:05.340
Yes, but before that, have you seen the yes-no warning? Yes.

00:35:05.619 --> 00:35:09.619
Do you see anything there, uh, by the name, like, fingerprint? Yes.

00:35:10.578 --> 00:35:12.578
Right? Any idea what that is?

00:35:13.122 --> 00:35:18.122
I think you're trying to… okay.

00:35:18.802 --> 00:35:24.802
Not any idea what that is, right? Like, just ideas, imagine, right? Like, for example, you are making a connection.

00:35:25.438 --> 00:35:28.438
Just like HTTPS, when you make a connection, you get something, right?

00:35:29.670 --> 00:35:31.670
So, in HTTPS, that is the certificate.

00:35:31.939 --> 00:35:35.939
So, do you think fingerprint has something to do with the public key? That's my question.

00:35:36.781 --> 00:35:42.781
And again, I'm not trying to confuse you, just asking, right? Does it have something to do with the public key or not?

00:35:44.898 --> 00:35:46.898
Okay.

00:35:47.081 --> 00:35:52.081
I think it's my… it might, but it's not like… okay.

00:35:52.064 --> 00:35:57.064
Let's say the fingerprint… okay, you get the fingerprint. When you… okay.

00:35:57.638 --> 00:36:05.638
It prompts you… okay, only one time also. Only one time. Next time you make a connection, it will never show you. It will never show you. Only the first time?

00:36:05.859 --> 00:36:07.859
The first time you initiate a connection?

00:36:09.356 --> 00:36:12.356
You are, of course, it works like HTTPS, but…

00:36:12.835 --> 00:36:18.835
Uh, there's no certificates this time. It shows a few. Does it have something to do with the beast public key? Like…

00:36:19.870 --> 00:36:22.870
Or not? What do you think, like, based on HTTPS?

00:36:23.878 --> 00:36:28.878
Okay, so… Because you don't have to remember, you just need to tell us, maybe I think it has something to do with the public key, or maybe not.

00:36:29.746 --> 00:36:33.746
See, I think it is, because since you… instead of exchanging key pairs, you're…

00:36:34.115 --> 00:36:39.115
Verifying it with a fingerprint. Yes, you're right. So, what happens is actually B gives the public key,

00:36:40.116 --> 00:36:47.116
hash of the public, actually. So V, V is going to give you a public key, and also, uh, it's actually going to

00:36:47.347 --> 00:36:49.347
Create a hash…

00:36:50.408 --> 00:36:58.408
of the private key, hash of the private key, not give the private key. We'll send the… also, it can verify… Because it's your machines, right? Okay. Actually, you know…

00:36:58.856 --> 00:37:00.856
You can just compute hash manually and compare.

00:37:01.282 --> 00:37:13.282
So that's why it doesn't need certificates. Okay, so… okay, so this is meant to be used so you can see if this private key is actually the… So, for example, public key hash, right? Let's say public key hash, even if you give the hash, that's the fingerprint, right?

00:37:13.225 --> 00:37:22.225
So, you can just go there and manually verify that public key hash is the same as what I see in the console. Okay, okay. But anyways, you are right, right? So it has something to do with the public key.

00:37:22.604 --> 00:37:26.604
Okay, so, uh, any thoughts about AI agents? Like, uh…

00:37:28.193 --> 00:37:33.193
what… like, any scenario in your mind, or maybe here?

00:37:33.393 --> 00:37:37.393
You can add another… Can you actually benefit from eAgent here in this scenario, somehow?

00:37:38.513 --> 00:37:42.513
Somehow, when it's in there. Think about it, right? Think about some… okay, interesting.

00:37:43.452 --> 00:37:48.452
let's say someone's operating on this machine, or maybe even this one.

00:37:48.592 --> 00:37:51.592
Someone's testing it out. There will be logs.

00:37:52.170 --> 00:37:54.170
And you can just use an agent to…

00:37:54.726 --> 00:38:00.726
let's say, monitor these drugs. Okay, that's good, right? But anything else? Anything else.

00:38:02.603 --> 00:38:07.603
Totally, totally based on your own perspective. Like, I… meaning we can maybe do this, right?

00:38:09.365 --> 00:38:18.365
Like, think about the real things that people face, and if you can actually use AI agents in that. Okay, let's say, since we're working on a note,

00:38:18.369 --> 00:38:25.369
managing program. Okay. Why not just set up an AI agent that can help you fetch the notes that you want?

00:38:25.699 --> 00:38:30.699
So, that would be a feature, right? Yes, it will be a feature. Okay, nice. That is good, right? I will take it.

00:38:31.156 --> 00:38:33.156
Let's say, uh…

00:38:34.184 --> 00:38:36.184
Let's say… let's talk about AIOps specifically, right?

00:38:36.526 --> 00:38:42.526
For example, yes, this is a good… you're making your application smart, right? Good, you can use… definitely use AI agent for that, right?

00:38:42.574 --> 00:38:48.574
Can you use AI agent in terms of, like, AIOps, something that has to do with DevOps, besides the logs? Anything else?

00:38:49.509 --> 00:38:51.509
But they don't think about. So, your application is always…

00:38:52.455 --> 00:38:57.455
up and running, it's never down, it's always, like, 100% usable.

00:38:58.978 --> 00:39:01.978
I mean, since you are going… let's say…

00:39:02.465 --> 00:39:04.465
Okay, you're hosting this in a, let's say,

00:39:05.258 --> 00:39:10.258
This production… okay, this is a… you're both in production and in the development, testing.

00:39:10.358 --> 00:39:12.358
Okay, both machines, you're…

00:39:12.822 --> 00:39:14.822
Probably going to set System CTL

00:39:15.834 --> 00:39:18.834
Yeah. Put on jobs, and to make sure this is always up and running.

00:39:19.715 --> 00:39:21.715
Uh, you can also, let's say… okay.

00:39:21.672 --> 00:39:23.672
Hmm…

00:39:25.079 --> 00:39:30.079
I mean, we can set up an agent that can roll back to a previous version if something happens.

00:39:30.338 --> 00:39:34.338
Yeah, very nice. Yes, you know, there are many more things, but this is good.

00:39:35.089 --> 00:39:41.089
Right? Although I would say you should actually add a human loop, which is also possible, because

00:39:41.859 --> 00:39:45.859
It might hallucinate and roll back, and things might go very bad, right?

00:39:46.472 --> 00:39:49.472
So it can actually tell the user, see, this is the problem,

00:39:49.832 --> 00:39:54.832
Allow me to rule back. There's a human loop thing also, right? So, like, for example, extensions, like,

00:39:55.311 --> 00:39:59.311
that there's a problem, we should… we should immediately roll back. Do you want me to roll back?

00:39:59.693 --> 00:40:06.693
So your person says yes and present, right? But it is nice, sorry. Okay, Tarek, thank you. That's it. I'm going to stop the…

00:40:07.190 --> 00:40:09.190
My script, here, save it.

