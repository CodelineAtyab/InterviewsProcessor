[00:00:31.839] Q: If A = 5 and B = 10 (values come from user input and can be any numbers), how would you swap them so B ends up with A's original value and A ends up with B's original value? (You can use any logic; later constraint: try without using a third variable.)
[00:01:22.861] A: Initially suggested using return (if using a function) or a temporary variable X to hold one value, then assign A = B and B = X. When disallowed a third variable, proposed an arithmetic approach: set A = A + B (A becomes sum), then B = A - B (recovers original A), then A = A - B (recovers original B).
Result: Correct

[00:10:25.963] Q: Given a list of numbers 1..10, how would you scan the list and rearrange it so all even numbers are on the left and all odd numbers on the right (e.g., result like [2,4,6,8,10,1,3,5,7,9])?
[00:12:51.997] A: Use an if condition with modulo 2 to detect even/odd. Maintain two lists (one for evens, one for odds), append each number to the appropriate list while scanning, then merge/concatenate the even list with the odd list to get the final result.
Result: Correct

[00:18:51.711] Q: You have many sensors producing readings (name, reading, timestamp). Would you store these sensor readings in a list or a dictionary?
[00:19:37.383] A: Prefer a dictionary because sensor data fits key-value pairs (unique keys), making the data more verbose and easier to classify/recognize.
Result: Partially Correct

[00:20:53.743] Q: If some sensors continuously generate thousands of readings per second (heavy, continuous writes), would you store those records in a dictionary or a list?
[00:21:01.977] A: For heavy continuous storage, a list is more suitable (implying append-oriented storage rather than dictionary).
Result: Correct

[00:22:00.759] Q: If a client needs to read a specific sensor's readings very quickly (e.g., 10,000 reads/sec) and you know the sensor ID, which structure (list or dictionary) would perform better for direct access?
[00:22:30.473] A: Said a list would be better (chose list for that access scenario).
Result: Incorrect

[00:23:53.887] Q: Given a function that receives a list and appends numbers inside the function (no return used), what will be printed when you print the original list after calling the function?
[00:26:23.513] A: The original list will be mutated; when printed after the function call it will reflect the appended numbers (i.e., the updated list is printed).
Result: Correct

[00:27:35.626] Q: Is there any benefit to using a feature-branch workflow in Git/GitHub?
[00:27:42.112] A: Yes — feature branches isolate each unit of work, make it clear who changed what and when, allow review and approval before merging to main/production, and help prevent breaking changes from being introduced directly into main.
Result: Correct

[00:28:34.966] Q: Is there a relationship between a branch and the staging area in Git?
[00:28:42.012] A: Yes — when you create a branch you add files to the staging area; the staging area tracks changes to be committed and those staged changes are what you commit/push for that branch.
Result: Correct

[00:29:18.199] Q: If you add files (git add) on main but do not commit, then switch to another branch (F1) and run git commit, will that commit apply to F1?
[00:29:27.466] A: You can switch branches, but you typically need to add/commit in the context of the branch; implied you would need to re-add/re-stage in the new branch and then push — answer expressed uncertainty.
Result: Partially Correct

[00:30:30.686] Q: What is the relationship between a Dockerfile, an image, and a container?
[00:31:09.276] A: Dockerfile contains instructions (working directory, runtime versions, libraries, build steps). A Dockerfile is used to build a Docker image; images are used to deploy/run containers. Images are the build artifact; containers are running instances of images.
Result: Correct

[00:31:52.815] Q: Can you spin up more than one container from the same image (i.e., multiple running containers from a single image)?
[00:31:56.793] A: Yes — you can create multiple containers from the same image; you can run many containers as needed from that image.
Result: Correct

[00:32:52.059] Q: If you run two containers from the same image on the same host and both applications expect to use container port 8000, how do you map host/container ports so both containers can run concurrently?
[00:33:41.933] A: The container port (inside) remains 8000, but you must map to different host ports when running multiple containers (e.g., host:8000->container:8000 for one, host:8001->container:8000 for another). You cannot bind the same host port twice; change the host port to run multiple instances.
Result: Correct

[00:36:13.664] Q: After you build an image locally (on Windows), how do you move/run that image on another machine (Ubuntu VM) manually?
[00:37:51.182] A: Push the image to a registry (e.g., Docker Hub), then on the target machine docker pull the image and run it (or use docker-compose) — that is the deployment flow.
Result: Correct

[00:38:46.629] Q: What are the benefits of using CI/CD (automation) instead of doing the build/push/deploy steps manually?
[00:38:57.329] A: CI/CD automates the process, saves time and cost, runs checks (integration tests/builds) before deploy, reduces human error, and ensures consistent automated deployment.
Result: Correct

[00:39:51.684] Q: What can an agentic AI (an "agent") do that a plain LLM or ChatGPT cannot?
[00:40:25.945] A: An agent can take actions (perform automation) — e.g., send emails, execute commands or workflows — whereas a vanilla LLM/ChatGPT only generates responses and does not directly perform external actions. Agents integrate LLM capabilities into automated, action-performing workflows.
Result: Correct