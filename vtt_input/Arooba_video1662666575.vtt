WEBVTT


00:00:00.161 --> 00:00:02.161
Mmm, yes, we will keep it as direct.

00:00:03.015 --> 00:00:06.015
If someone complains like this, but they have proof.

00:00:06.820 --> 00:00:08.820
So let's do…

00:00:09.457 --> 00:00:11.457
Data certificate.

00:00:23.719 --> 00:00:31.719
Okay, Aruba, so this interview will be about, uh, basics, some intermediate things, maybe some advanced things also, related to Python,

00:00:31.985 --> 00:00:33.985
Git, uh, docker,

00:00:34.631 --> 00:00:37.631
networking, computer networking.

00:00:38.528 --> 00:00:40.528
Right, and deployment little things, right?

00:00:41.217 --> 00:00:43.217
So, I'll just quickly start.

00:00:43.699 --> 00:00:45.699
Where the…

00:00:46.941 --> 00:00:49.941
some Python things, right? Uh, see…

00:00:50.870 --> 00:00:55.870
don't… you don't have to remember the syntax, you don't have to remember the terminologies, the words.

00:00:56.333 --> 00:00:59.333
Uh, we just want to see your logic.

00:01:00.093 --> 00:01:05.093
Okay, and your concepts, right? So you can just explain… if you want to write, you can write

00:01:05.657 --> 00:01:08.657
But there are no, like, deductions or…

00:01:09.039 --> 00:01:13.039
consideration of syntax-related things at all, right?

00:01:13.362 --> 00:01:15.362
So I'm going to give you…

00:01:16.812 --> 00:01:20.812
I'm going to give you a small

00:01:21.530 --> 00:01:24.530
problem, and this is actually, let's say,

00:01:27.014 --> 00:01:29.014
an error of numbers.

00:01:29.598 --> 00:01:31.598
And you have, let's say, 2…

00:01:32.500 --> 00:01:34.500
2…

00:01:34.478 --> 00:01:36.478
3… 3…

00:01:36.581 --> 00:01:38.581
3…

00:01:39.148 --> 00:01:41.148
One… one…

00:01:42.406 --> 00:01:47.406
6… 10… right? So this is an array of numbers, right? Okay, okay.

00:01:47.690 --> 00:01:51.690
What I have to do, I have to apply some logic.

00:01:52.580 --> 00:01:55.580
programmatic logic to convert this array

00:01:56.415 --> 00:01:59.415
To convert this list of numbers into something like this.

00:02:05.568 --> 00:02:08.568
So, any repeated numbers are eliminated.

00:02:11.548 --> 00:02:14.548
Right? So, how… how can you scan the array?

00:02:15.339 --> 00:02:20.339
Item by item. How can you scan the area item by item, and what can you do?

00:02:21.805 --> 00:02:23.805
to get this result to eliminate the repeating.

00:02:24.169 --> 00:02:31.169
Just your logic, right? And by the way, take your time, think about it for 2 minutes. First, think about it for 2 minutes, right?

00:02:31.360 --> 00:02:33.360
then you can discuss.

00:02:34.087 --> 00:02:36.087
If you want to write something, you can. Your choice.

00:02:36.493 --> 00:02:39.493
But think about it, don't immediately answer the problem-solving questions.

00:03:05.794 --> 00:03:07.794
For example, this is the list.

00:03:08.217 --> 00:03:10.217
I think this quantit number.

00:03:12.898 --> 00:03:15.898
To start this, I mean, you should, uh…

00:03:16.711 --> 00:03:18.711
And, for example, create as a list.

00:03:19.976 --> 00:03:23.976
dictionary. Uh, whatever you like. Uh, for example, unique?

00:03:24.517 --> 00:03:26.517
Okay.

00:03:27.935 --> 00:03:29.935
Okay?

00:03:30.997 --> 00:03:33.997
a set, let's say set, right? Set is equal, okay.

00:03:34.654 --> 00:03:37.654
You save all the unique number?

00:03:38.455 --> 00:03:43.455
Here, to print it. Okay. How will you save first? Use a for loop.

00:03:43.474 --> 00:03:45.474
Okay, for a loop, okay? For loop.

00:03:46.112 --> 00:03:50.112
And you will store everything to a set?

00:03:57.365 --> 00:03:59.365
for, for example, you know?

00:04:03.214 --> 00:04:07.214
Ing number? Yes.

00:04:09.102 --> 00:04:11.102
You are storing it, I think, in set, right? You told me.

00:04:17.109 --> 00:04:21.109
No, it's fine, don't remember the sentence, just write whatever you… whatever you like. For example, if…

00:04:21.304 --> 00:04:23.304
Venom…

00:04:24.541 --> 00:04:26.541
here in Unique.

00:04:26.521 --> 00:04:28.521
Yeah, in?

00:04:28.971 --> 00:04:30.971
You can write in unique, it's fine, I'll do fine.

00:04:31.656 --> 00:04:35.656
No, uh, for example. Yes, if number in Eurek is fine, just write it down.

00:04:35.668 --> 00:04:39.668
Or not in is fine, whatever you… Not in unique. Okay.

00:04:43.178 --> 00:04:46.178
I've been to Benham for a day.

00:04:47.081 --> 00:04:51.081
Okay, yes, it's fine. Yes, it will go. But not in a unique…

00:04:51.250 --> 00:04:54.250
For example, unique?

00:04:55.743 --> 00:04:58.743
I've been… You already have done it, Turbo, yeah.

00:04:59.692 --> 00:05:02.692
Jenny, for example, in here, in Palestin?

00:05:03.239 --> 00:05:05.239
Not only, yes, you've done it, like, it's… I understand, yeah.

00:05:05.592 --> 00:05:11.592
So, you've done it, right? You are checking if the number is not there only then you add, right? So you don't get repeated elements.

00:05:11.931 --> 00:05:13.931
Yes. Correct. Yeah.

00:05:14.044 --> 00:05:16.044
Nice. Okay, what else?

00:05:16.728 --> 00:05:19.728
Give me just one move. But I did it very quickly.

00:05:20.015 --> 00:05:22.015
Right, so let's…

00:05:25.013 --> 00:05:27.013
do this one, which is, uh…

00:05:27.535 --> 00:05:29.535
For example, let's say…

00:05:31.056 --> 00:05:34.056
And you have numbers from 1 to 1 to 10.

00:05:43.074 --> 00:05:45.074
You have numbers from 1 to 10, right? One number is missing.

00:05:47.554 --> 00:05:50.554
Okay, so now, the thing is, the numbers will always be

00:05:50.763 --> 00:05:52.763
from 1 to 10.

00:05:53.637 --> 00:05:55.637
Uh, any number can go missing, only one number.

00:05:56.842 --> 00:05:59.842
And it's always in series, like, it starts from 1 and ends.

00:06:00.463 --> 00:06:07.463
21? At 210, right? Mr. Number 4? 4 is missing. How would you identify in a for loop that the number is missing?

00:06:09.115 --> 00:06:11.115
How can you figure out…

00:06:11.491 --> 00:06:13.491
Think about it, take your time.

00:07:08.026 --> 00:07:11.026
And you can do anything you like, anything you like.

00:08:24.544 --> 00:08:27.544
Yeah, and the old… and if, for example, if I, in the…

00:08:27.897 --> 00:08:29.897
In the range of…

00:08:29.882 --> 00:08:31.882
of N?

00:08:32.800 --> 00:08:36.800
Okay. And if it is, yeah, an increment by one. Okay.

00:08:37.235 --> 00:08:44.235
Look at that. Okay, so for example, what you're saying is… because these are 10 numbers, right? Yes, 10 numbers. So, uh, like, 1, 10.

00:08:44.384 --> 00:08:47.384
will generate from 1 to 10, right?

00:08:48.196 --> 00:08:53.196
Yeah, 11, actually. So, 1 to 10. Because of this one, 1 to 9.

00:08:53.394 --> 00:08:59.394
Now, this I is 1, 2, 3, 4, 5, 6, 7… now what will you do? How will you identify from this list?

00:09:01.070 --> 00:09:04.070
Will you compare, like, what will you do? It is, for example…

00:09:05.224 --> 00:09:09.224
Yeah, and if… this is, for example, the minimum.

00:09:09.328 --> 00:09:11.328
Nemo, the number?

00:09:12.297 --> 00:09:14.297
And this is the maximum.

00:09:15.427 --> 00:09:18.427
Okay. Maximo? No more? But?

00:09:19.518 --> 00:09:22.518
It is increment as a 1.

00:09:23.491 --> 00:09:25.491
Yeah, but actually, I want to find out who.

00:09:26.173 --> 00:09:28.173
I'm missing. Not maximum, minimum.

00:09:29.494 --> 00:09:31.494
I want to find force…

00:09:32.942 --> 00:09:35.942
I want to… I want to just print 4ism.

00:09:39.117 --> 00:09:42.117
Wait, you know, just print 4 is missing, nothing else.

00:09:43.703 --> 00:09:50.703
So, okay, this is fine. Now, this I is 12345678910, right? But this is another list.

00:09:51.582 --> 00:09:53.582
Let's say this is another list.

00:09:54.512 --> 00:09:57.512
This I… this range is going to give you another list.

00:09:58.144 --> 00:10:02.144
Yes, from 1 to 10. And this is from 1 to 10, but one is missing.

00:10:02.962 --> 00:10:07.962
So, do you want to compare both of… both IE with this list, and, like, how would you like to do it?

00:10:09.123 --> 00:10:13.123
For example, if I make… if…

00:10:13.627 --> 00:10:16.627
If I increment by 1, any…

00:10:17.702 --> 00:10:19.702
So, for example, eyes one, right?

00:10:20.558 --> 00:10:24.558
Yes, it's… it's 1. Okay, then? Then, for example, plus 2?

00:10:25.263 --> 00:10:27.263
plus 1 x is equal to, and like this.

00:10:28.234 --> 00:10:30.234
And 2 plus 1, 2, 3.

00:10:30.994 --> 00:10:34.994
3 plus 1? 4. This is the missing value, I mean.

00:10:35.392 --> 00:10:39.392
4 plus 1? But how do you know this is missing? Maybe 5 is missing.

00:10:41.975 --> 00:10:43.975
Ready to hear, like, in the if condition,

00:10:43.999 --> 00:10:47.999
In the if condition, you are actually checking RE,

00:10:48.201 --> 00:10:50.201
With what? I with what?

00:10:51.163 --> 00:10:53.163
like, eyes? Yeah.

00:10:53.314 --> 00:10:57.314
I, with what I'm trying to… Compare I with the no.

00:10:58.094 --> 00:11:08.094
With this rate, this list. Okay, so you compare one with one first, right? And then, two with two, three with two, and four, there's no 4, right? 4. If that happens, then?

00:11:08.617 --> 00:11:11.617
Yep, yes, that's what I'd like to hear, yeah.

00:11:12.037 --> 00:11:14.037
Good.

00:11:14.718 --> 00:11:16.718
Uh, okay, now…

00:11:20.329 --> 00:11:24.329
You are building an app, uh, in Hackathon, you were working on, uh…

00:11:25.240 --> 00:11:28.240
an application, digital twin, right? Like, uh…

00:11:29.477 --> 00:11:31.477
Yeah, for example, I just…

00:11:33.510 --> 00:11:35.510
I just want you to tell me that, uh,

00:11:35.718 --> 00:11:39.718
Based on all of the knowledge that you have acquired throughout the trainings.

00:11:41.217 --> 00:11:46.217
Right? Product screenings, you have required… you have… you've learned about Python Basics, you know about networks, you have…

00:11:46.280 --> 00:11:49.280
virtual machines, containerization, and everything, right? Yes.

00:11:49.400 --> 00:11:51.400
So…

00:11:52.224 --> 00:11:57.224
your digital twin. I'm just talking about the web application, right? Not anything else, just the UI.

00:11:57.800 --> 00:11:59.800
and APIs. So…

00:12:00.554 --> 00:12:02.554
Can you tell me…

00:12:04.545 --> 00:12:08.545
Can you tell me the process, like, how you created…

00:12:10.072 --> 00:12:14.072
like, how UI and APIs are working together? Are they actually…

00:12:14.879 --> 00:12:19.879
Is UI part of API, actually? Or is UI not a part of API? Is it separate?

00:12:22.840 --> 00:12:24.840
in your digital twin project.

00:12:25.735 --> 00:12:31.735
Let's say you want to design that application from scratch, how would you do it?

00:12:33.761 --> 00:12:35.761
From scratch? Like, what will you do first?

00:12:35.859 --> 00:12:41.859
Jennifer, thanks, I make the backend and the… How will you make the backend? And by the Python code.

00:12:43.795 --> 00:12:47.795
Okay, like, just walk me through, right? Like, for example, walk me through, and it says high level only.

00:12:48.263 --> 00:12:50.263
First, you will…

00:12:50.891 --> 00:12:55.891
You will write some Python code. Yeah, Python code. And then, what will you use? Run it.

00:12:56.527 --> 00:12:59.527
Like, how will you create an API?

00:12:59.871 --> 00:13:01.871
Uh, Aruba. So…

00:13:02.740 --> 00:13:04.740
which library would you use for the API?

00:13:05.798 --> 00:13:13.798
Okay, let's use first.ABI, and then use it, and we put the key, the imp…

00:13:14.612 --> 00:13:16.612
This is key. In .EK in V5.

00:13:17.264 --> 00:13:25.264
Key forward for ABI, for example. If you are using an API, right? Like, forget about the digital twin. Okay, let's forget about everything.

00:13:26.289 --> 00:13:30.289
Let's say you want to brief an anonymous feedback API.

00:13:30.405 --> 00:13:36.405
Where customers can give feedback, can see the feedback, can actually delete the feedback.

00:13:36.475 --> 00:13:38.475
So, how can you…

00:13:39.274 --> 00:13:41.274
create the API using First API, high level only.

00:13:42.254 --> 00:13:44.254
Right? What are the endpoints that you would go for?

00:13:46.339 --> 00:13:48.339
It can just tell me, or maybe write it.

00:13:49.080 --> 00:13:53.080
highlights on the… Okay, so for example…

00:13:56.165 --> 00:14:00.165
If we want to create a feedback, let's generated on here.

00:14:02.070 --> 00:14:05.070
Yeah, and it is, I know, and then share it for the GitHub.

00:14:05.608 --> 00:14:11.608
Yes, so whatever, just write everything. Like, how will I start, what will I do next, how will I deploy it?

00:14:11.761 --> 00:14:13.761
How will they containerize it? Everything.

00:14:14.055 --> 00:14:19.055
You need to show it as a diagram here in the paper, right?

00:14:18.922 --> 00:14:20.922
To publish it in a Docker Hub.

00:14:21.554 --> 00:14:25.554
Yeah, I mean, first, we built the application of the code in the Wi-Fi.

00:14:25.882 --> 00:14:31.882
If you design at the back end? Can you… can you draw also? Like, for example, if…

00:14:32.660 --> 00:14:35.660
Okay, excellent, okay. Let's say feedback application. What will you do first?

00:14:36.846 --> 00:14:40.846
I will go for you. Design the, for example, in the back end by Python program.

00:14:41.497 --> 00:14:54.497
Okay, I mean, right here. Back-end and front-end. The back-end Python and the front-end HTML, fine. HTML only. Yeah, HTML, that includes Java and, uh… JavaScript or Java?

00:14:55.162 --> 00:15:00.162
JavaScript and CSS, right? CSS, yes. But where would you put the UI? Where's the UI?

00:15:00.108 --> 00:15:06.108
like, is it in your backend code or somewhere else?enev.

00:15:06.672 --> 00:15:12.672
UI, user interface, your HTML file, where is your HTML file? HTML, uh, front end.

00:15:13.898 --> 00:15:18.898
folder, right? Yes, yes, but where it is, like…

00:15:19.631 --> 00:15:23.631
Okay, uh, so for example, this is your backend folder, right? Backend.

00:15:24.893 --> 00:15:30.893
In the backend? Back in the Python? Yes, in the Python, right? And the front? Yeah, let's say frontend?

00:15:31.425 --> 00:15:36.425
is this UI HTML, right? So, now you have two folders, right? Two folders.

00:15:37.139 --> 00:15:41.139
One folder is backend, one is frontend, okay? Done? It is. Yes, now, how will you…

00:15:42.175 --> 00:15:45.175
How will you deploy the application? And then, uh… can you test it?

00:15:45.329 --> 00:15:50.329
Okay, tested. This is why Annie took a first in the browser.

00:15:50.523 --> 00:15:52.523
Okay. Uh, right there.

00:15:53.191 --> 00:15:55.191
Like, particular URL, okay?

00:15:55.338 --> 00:15:57.338
Any other tool for testing? UA?

00:15:58.096 --> 00:16:00.096
And then at the end, do we use Docker?

00:16:00.287 --> 00:16:04.287
The containerization. Why would you use Docuan?

00:16:04.596 --> 00:16:07.596
to do what? Uh, because Adoker, it is the only…

00:16:07.944 --> 00:16:12.944
open source that aligned with, that contain nearly everything, any…

00:16:13.339 --> 00:16:16.339
Anyone can, uh, run the application?

00:16:16.443 --> 00:16:18.443
The only easiest way.

00:16:18.674 --> 00:16:23.674
Uh, yeah, yeah. In easiest way, no need to write the, for example, your…

00:16:23.561 --> 00:16:27.561
IV or the board, uh, tournament.

00:16:28.361 --> 00:16:30.361
the application in the browser.

00:16:30.400 --> 00:16:36.400
Just by only clicking the docker, it is opening, and it will open for… But it has IP address and port.

00:16:36.691 --> 00:16:45.691
Even if you click, the browser has… Yes, but you didn't write it down manually. Okay, so you can write it. Okay, so you're talking about convenience, right? Like, it is convenient.

00:16:46.062 --> 00:16:48.062
It's easy. Okay, but anyways…

00:16:48.322 --> 00:16:52.322
So, this API in UI, you also push it to GitHub or Uber?

00:16:53.775 --> 00:16:55.775
Also, will you push it to GitHub also?

00:16:56.785 --> 00:17:00.785
Maybe I? No. The backend and front-end, no need to push it to GitHub, okay.

00:17:01.458 --> 00:17:06.458
Maybe I… I didn't… we didn't push it in the GitHub. No, no, like, for example, see…

00:17:06.524 --> 00:17:12.524
Maybe I'm not rich. Yes, the file, the quote. Uh, what I'm trying to say, imagine you're building a new application,

00:17:12.700 --> 00:17:14.700
And you're not alone.

00:17:14.880 --> 00:17:17.880
You have many team members working on this application, right?

00:17:18.011 --> 00:17:22.011
So, you're building a feedback application, forget about Hackathon Project, right?

00:17:22.515 --> 00:17:26.515
So, you have Python code, you have HTML, CSS, JavaScript.

00:17:26.976 --> 00:17:32.976
Do you need to push it to GitHub, or do you think it's fine? Let's leave it.

00:17:33.294 --> 00:17:35.294
to any updates?

00:17:36.585 --> 00:17:41.585
If anyone, for example, make an update and change in the code, we can build it easily, Yanni.

00:17:42.280 --> 00:17:45.280
Okay, collaboration, right? You can find it in the GitHub.

00:17:46.096 --> 00:17:48.096
And, uh, for example, make Aribo.

00:17:48.420 --> 00:17:54.420
and everyone share his work in the report. Why don't you just use Google Drive?

00:17:56.475 --> 00:17:58.475
All of you. You can also put it in Google Drive.

00:18:01.706 --> 00:18:05.706
But you… can you use it? Like, why GitHub? Like, you have to learn Git,

00:18:06.130 --> 00:18:11.130
branches come at so many things. Why not just use Google Drive? Yeah, for example, uh, GitHub for…

00:18:11.718 --> 00:18:13.718
Each of them can…

00:18:14.350 --> 00:18:21.350
Work in a separated branch. For example, if first one, if the first one, for example, make any change in the code… Yeah.

00:18:21.690 --> 00:18:26.690
Annie, doesn't it conflict with other reports? Vanibirds in other…

00:18:27.230 --> 00:18:33.230
Good. Nice, nice, nice. Okay. So, and then, um… The niceness.

00:18:33.283 --> 00:18:36.283
Okay, that's nice, right? So, really, to the point.

00:18:36.988 --> 00:18:41.988
a good featured launch. Okay, let's… now you have the API and UI, and also on GitHub, right?

00:18:42.835 --> 00:18:44.835
Now, this is a 24-7 machine.

00:18:45.805 --> 00:18:50.805
Yes. Pierre? Now, how would you move this application from here to here? What would be your approach?

00:18:52.408 --> 00:18:54.408
24-hour?

00:18:54.528 --> 00:18:59.528
Just move this application from here to here, it's already on GitHub. How will you do that?

00:19:01.202 --> 00:19:04.202
And then in the winter, there was a fronta.

00:19:04.659 --> 00:19:06.659
Okay. And this is a clonjo.

00:19:07.076 --> 00:19:13.076
This is the… check your, uh, application.

00:19:13.112 --> 00:19:20.112
Yeah, sorry. This is Mick, Annie, the server, it is the only continuously…

00:19:20.854 --> 00:19:25.854
Check the working of your website. Yeah, but see, this is empty right now.

00:19:26.877 --> 00:19:29.877
This is empty, there's nothing. How to move it to the window?

00:19:30.309 --> 00:19:42.309
So I can… I can move it, uh… I can use VIN, SP… Even a shipping press? SCP? Like SSH, right? I will write SSH. SSH, it is… that is a protocol that allow you…

00:19:43.155 --> 00:19:52.155
To secure communication between your local laptop to the remote. Okay, nice. To the remote computer virtual machine. And then what will you do, Bukhi?

00:19:52.456 --> 00:19:55.456
Let's say you have a connection now. How will you move the app?

00:19:55.679 --> 00:19:57.679
You can put it?

00:19:57.665 --> 00:19:59.665
April?

00:19:59.769 --> 00:20:04.769
No, no. Good clone? Popy-paste, okay. Yes, copy-paste, it is.

00:20:05.590 --> 00:20:10.590
Yeah, it's possible, you're right. Should I not do it using it cloned? Because it's already on GitHub?

00:20:10.681 --> 00:20:12.681
In Linux.

00:20:13.585 --> 00:20:15.585
Linux, I think… in Linux, can I do a Git clone?

00:20:16.934 --> 00:20:18.934
from GitHub, can I get it from GitHub or not?

00:20:19.948 --> 00:20:26.948
Yes, you can in the 10 minutes. And by copy manually, right? Okay. Yes, okay, done.

00:20:27.399 --> 00:20:32.399
Okay, let's say. But you have given me two approaches, right? You say GitHub, it's possible, but okay, which is good.

00:20:32.891 --> 00:20:36.891
Everything is going good so far. Now, you have the application here.

00:20:38.201 --> 00:20:40.201
Uh, so how do you run it now?

00:20:40.590 --> 00:20:42.590
And so…

00:20:43.115 --> 00:20:46.115
We can run it by any, uh…

00:20:47.000 --> 00:20:49.000
First, uh…

00:20:49.343 --> 00:20:51.343
By using SSH activated,

00:20:52.117 --> 00:20:54.117
Let's attached, for example, my name at…

00:20:55.052 --> 00:21:02.052
the… Okay, I understand. You have the connection. You already are inside, right? You already have copy-pasted the API input, right?

00:21:01.959 --> 00:21:05.959
Now, how do you run the Python application inside?

00:21:06.161 --> 00:21:08.161
Let's say your terminal is open.

00:21:08.904 --> 00:21:11.904
what you were saying? SSLedge is open.

00:21:12.034 --> 00:21:14.034
Now, what command would you…

00:21:15.357 --> 00:21:20.357
like, not asking over the command, but to activate dot key and V…

00:21:21.363 --> 00:21:23.363
VE and me, right? Okay, done, then?

00:21:25.886 --> 00:21:29.886
Okay, let's say you activated the virtual environment, right? And then…

00:21:32.856 --> 00:21:34.856
Next, what will you do?

00:21:36.299 --> 00:21:41.299
Annie's… It's a Python application, like, how will you run it?

00:21:41.796 --> 00:21:47.796
Python? Yes, yes.

00:21:48.064 --> 00:21:52.064
No need to be confused, okay, right? So now your application is running, right? Python?

00:21:52.519 --> 00:21:54.519
application is running. Now tell me…

00:21:55.641 --> 00:21:57.641
You can do everything manually, like this.

00:21:57.962 --> 00:21:59.962
then why Docker?

00:22:00.720 --> 00:22:02.720
Why is there a need for Docker?

00:22:03.126 --> 00:22:06.126
The special thing in the darker, and you can…

00:22:06.993 --> 00:22:08.993
Docker have image and container.

00:22:09.341 --> 00:22:11.341
The image was just straight, just straight.

00:22:11.636 --> 00:22:15.636
But the container, it is, yeah, I need the processing case.

00:22:17.097 --> 00:22:28.097
That means the processing? The suspicion in the Docker, it is a lightweight, yeah, I need no need to install, for example, Python virtual and everything from the beginning.

00:22:28.754 --> 00:22:30.754
And from the beginning.

00:22:31.318 --> 00:22:35.318
Okay, yes, I understand, I understand, but here, see, uh…

00:22:35.574 --> 00:22:39.574
You can use Docker Container to move your application from here to here, right?

00:22:40.950 --> 00:22:48.950
Yes, if you… and you face any problem in your laptop, for example, damage your laptop, you can easily move everything by using container in another laptop.

00:22:49.696 --> 00:22:51.696
Okay, so that's what I'm talking about.

00:22:51.633 --> 00:22:55.633
Yeah. But you told me how you can do it manually, right?

00:22:56.520 --> 00:22:58.520
Yes. Then why use Docker? Because you can do manually.

00:22:58.515 --> 00:23:00.515
Is there any benefit?

00:23:01.435 --> 00:23:04.435
for using Docker? To make any the process automation.

00:23:04.687 --> 00:23:08.687
automated, for example, there is a, for example, a Docker Compose. Okay.

00:23:09.686 --> 00:23:14.686
That Docker combos allow you to run all the containers?

00:23:14.922 --> 00:23:19.922
Yeah, I need at once, at the same time, all. Rather than, for example,

00:23:19.926 --> 00:23:24.926
Uh, right, docker run, then you find name, find name, find name, find name. You can use…

00:23:24.916 --> 00:23:26.916
And Docker Comboce?

00:23:27.236 --> 00:23:29.236
And run it all at once.

00:23:30.410 --> 00:23:32.410
Okay, yes, you are. So this can save a time.

00:23:33.335 --> 00:23:36.335
Any other benefit? Yes, it will save time, definitely, right?

00:23:37.401 --> 00:23:39.401
But, uh, for example,

00:23:40.118 --> 00:23:46.118
Okay, one thing, Aruba. Why… what is the benefit of creating a Python virtual environment?

00:23:46.884 --> 00:23:50.884
Why… we cannot… we can also work without it, right?

00:23:51.418 --> 00:23:57.418
Um, because, yeah, in the Linux, for example, you're working in one project.

00:23:57.976 --> 00:24:06.976
So, you should activate it, E and V, to make everything separately. For example, when you come to work to another project, there is no a conflict.

00:24:08.060 --> 00:24:12.060
For example, in the project number one, for example, you want to download…

00:24:12.644 --> 00:24:17.644
By from version 2. And in, uh, project number 2, you want to download

00:24:17.779 --> 00:24:19.779
For example, Python version 3.

00:24:20.802 --> 00:24:23.802
So, everything keeps abruptly, and it not conflict.

00:24:24.026 --> 00:24:29.026
And it does not come, for example, the Python of version of Project 1 in the 2.

00:24:29.004 --> 00:24:31.004
And, like it is…

00:24:31.948 --> 00:24:34.948
Okay. No, no, no, you understand them very nicely.

00:24:34.941 --> 00:24:36.941
Okay, everyone. So…

00:24:41.388 --> 00:24:43.388
This is good, right? But…

00:24:44.376 --> 00:24:46.376
For example, if I want to move

00:24:47.385 --> 00:24:52.385
this app from this machine to this machine, let's say this is your Windows machine, right?

00:24:53.962 --> 00:24:57.962
So, let's say I'm going to containerize it using Docker…

00:24:58.267 --> 00:25:00.267
Dockerfile, right? I'm going to build image.

00:25:00.647 --> 00:25:02.647
I'm… can I push the image to open up?

00:25:03.758 --> 00:25:05.758
to Docker Hub.

00:25:06.599 --> 00:25:09.599
Can I push the image of your application to Docker Hub?

00:25:11.136 --> 00:25:13.136
Okay, and then can I pull it here?

00:25:13.260 --> 00:25:15.260
from Docker Hub?

00:25:15.999 --> 00:25:22.999
You sure can. And I can run the app, right? Yes, you can. So, all of these things are… I'm doing manually right now, right?

00:25:24.502 --> 00:25:26.502
Do you see any benefits of CICD, actually?

00:25:26.904 --> 00:25:28.904
Like, what is CICD? How would you…

00:25:30.651 --> 00:25:36.651
Yeah, define it. See, I see, uh, CICDCI, it is a continuous integration.

00:25:36.991 --> 00:25:41.991
that, for example, when a developer a code,

00:25:42.442 --> 00:25:48.442
create a hood, and then the narrative, then push it to the GitHub.

00:25:48.830 --> 00:25:56.830
Uh, to the GitHub, for example, uh, we are any… no need to, for example, wait for the code owners to check

00:25:57.434 --> 00:26:03.434
To check if it is any correct or not. No, no, they will check, because… No, no, any… manually, manually.

00:26:03.995 --> 00:26:05.995
And I am waiting for, for example,

00:26:06.416 --> 00:26:09.416
Good owner, to check if it… and this is take a time.

00:26:10.690 --> 00:26:14.690
But the benefit of this, yeah, and you make everything automatically.

00:26:15.000 --> 00:26:18.000
Okay, so…

00:26:18.197 --> 00:26:20.197
When you create a pull request, right? Yes.

00:26:20.918 --> 00:26:22.918
Until you merge it to the main branch,

00:26:24.026 --> 00:26:26.026
CI doesn't distract, actually.

00:26:26.227 --> 00:26:33.227
Yeah, see, yeah, CI actually will tell you if your build is successful, right? Successful or not?

00:26:33.486 --> 00:26:40.486
But still, the code review is needed. If you don't merge it to the main CD will not start. Still, you need approvals from code owners.

00:26:40.976 --> 00:26:43.976
By using Agent Kens, Zhang can say… No, no, still, see?

00:26:44.880 --> 00:26:47.880
I… I create a branch on GitHub, right?

00:26:48.967 --> 00:26:51.967
I want your approvals first, because if I don't merge domain,

00:26:52.158 --> 00:26:54.158
CD will not start automatically.

00:26:54.513 --> 00:26:56.513
So I need approval, so it's not saving time.

00:26:57.481 --> 00:26:59.481
It's… it's not… it doesn't…

00:26:59.722 --> 00:27:01.722
ignore the poor reviews.

00:27:01.935 --> 00:27:06.935
overviews have to be done. Yes, automatic what?

00:27:07.683 --> 00:27:11.683
Not code reviews. Code reviews still need to be done. Automatically, that checking, and they need to push it.

00:27:11.925 --> 00:27:16.925
branch, in the GitHub. If you push…

00:27:17.752 --> 00:27:19.752
Uh, something to GitHub, let's say, right?

00:27:19.964 --> 00:27:25.964
So, CI checks by building a replication if it is working fine, right? Yes.

00:27:26.831 --> 00:27:28.831
But still, it will read.

00:27:28.933 --> 00:27:30.933
For it to be merged to the main branch, right?

00:27:31.719 --> 00:27:34.719
Okay. And to merge the image, you need approvals.

00:27:34.820 --> 00:27:36.820
for code owners.

00:27:38.226 --> 00:27:42.226
See, in my examples, what I'm doing, I'm directly pushing to the main branch, don't take my example.

00:27:43.697 --> 00:27:45.697
But…

00:27:46.267 --> 00:27:51.267
If you don't push to the main branch, even CI will not start, it will not build the Docker image, because

00:27:51.145 --> 00:27:53.145
It is checking main branch, remember?

00:27:53.343 --> 00:27:55.343
Jenkins was checking the main branch rate,

00:27:56.402 --> 00:28:00.402
So, this is not the benefit… yes, there are other benefits, but you're saying, right?

00:28:00.924 --> 00:28:02.924
But core owners…

00:28:03.583 --> 00:28:05.583
are needed, always.

00:28:05.700 --> 00:28:10.700
You cannot omit them, because they're CICD. It's more accurately.

00:28:11.175 --> 00:28:13.175
No, what's not.

00:28:13.318 --> 00:28:17.318
Like, for example, for example, 2 plus 2 is 4, right? Yes.

00:28:18.062 --> 00:28:20.062
So, a person can write 2…

00:28:20.426 --> 00:28:27.426
plus 2 plus 1 minus 1 multiplied by 5, divided by 5, plus 0 minus 0.

00:28:27.541 --> 00:28:29.541
Equal to 4.

00:28:30.505 --> 00:28:33.505
So, CI will say, yes, I see the full results are good.

00:28:33.839 --> 00:28:35.839
But why?

00:28:36.473 --> 00:28:43.473
confusing the developers by writing so many numbers, right? And why degrading the performance? By doing so many calculations? Code owners will catch that.

00:28:44.547 --> 00:28:49.547
Gold owners will see if your code is written correctly, is optimized, is maintainable.

00:28:50.135 --> 00:28:53.135
CI cannot check if the report is maintainable.

00:28:54.214 --> 00:28:56.214
There are other ways to check it, but, like, it cannot…

00:28:57.584 --> 00:28:59.584
So, the still co-donors are needed.

00:28:59.701 --> 00:29:03.701
What CI do? It builds your application to make sure it runs.

00:29:04.346 --> 00:29:14.346
Yeah. But it doesn't check your core… your bet code can also run, right? If it is success and it is correct with the Docker images. But if the code is bad, for example, 2++ is generating 5.

00:29:15.153 --> 00:29:17.153
Imagine. Your application has 2 plus 2?

00:29:17.081 --> 00:29:23.081
But it says 5, right? So, application is working, right? Yes. So, CI will say, good, everything is good, application works.

00:29:24.141 --> 00:29:28.141
But it's wrong. The results are wrong. Code owners checks the core code logic and everything.

00:29:29.149 --> 00:29:33.149
See, I cannot check that. Okay, let's move to… what other benefit do you see of CICD?

00:29:34.096 --> 00:29:37.096
It's not code owners. Any other things that you see?

00:29:37.285 --> 00:29:40.285
Any, sort of, about the shortest solution?

00:29:41.549 --> 00:29:44.549
Yes, yes, what about that?

00:29:44.608 --> 00:29:47.608
The shortest solution does give you…

00:29:48.506 --> 00:29:51.506
That was the reason. The best foot, sorry? Reason, yeah.

00:29:52.541 --> 00:29:56.541
Uh, no, I don't think so. It's not about research. You said something about automation.

00:29:58.004 --> 00:30:04.004
It automates something. What was that? Yes, can you tell me what does it automate?

00:30:03.956 --> 00:30:12.956
step by step? Jenkins HTTB, that identify another HTTP, if there is any event happen or action happens?

00:30:13.461 --> 00:30:16.461
Okay. For example, if you make any change in record,

00:30:17.981 --> 00:30:23.981
They will notify, yeah, there is a change. Okay. You should see any… you should correct it.

00:30:24.766 --> 00:30:27.766
I get… Okay. And make sure it is success or not.

00:30:27.964 --> 00:30:31.964
Okay. And then, if it is a success, it is booked Docker image.

00:30:32.753 --> 00:30:34.753
like, this is the automated process, right?

00:30:35.253 --> 00:30:39.253
Yes. So it's… what is the benefit of this automated process benefit?

00:30:40.730 --> 00:30:45.730
And it's all the time.

00:30:49.141 --> 00:30:52.141
So, you know you know, but…

00:30:53.847 --> 00:30:56.847
Uh, there's a problem I sense in communication, but at least you know things.

00:30:57.140 --> 00:30:59.140
you know, all of the things.

00:30:59.663 --> 00:31:01.663
Right, so…

00:31:01.800 --> 00:31:03.800
It's good. What are webhooks?

00:31:06.214 --> 00:31:09.214
I don't know, because you just talked about webhooks, but you didn't use the name webhook.

00:31:10.226 --> 00:31:12.226
So, how do you define webhook?

00:31:16.010 --> 00:31:19.010
With Hook, uh, this seems…

00:31:20.007 --> 00:31:22.007
It's way too many times.

00:31:22.135 --> 00:31:24.135
Okay, I will give you an example. So…

00:31:25.006 --> 00:31:27.006
So, for example, GitHub,

00:31:27.443 --> 00:31:29.443
When you push something to GitHub,

00:31:29.908 --> 00:31:35.908
GitHub tells Jenkins, right? Yes, Jenkins. So how is that possible?

00:31:37.603 --> 00:31:39.603
It's possible by webhook, but, like…

00:31:42.687 --> 00:31:44.687
Do I remember something about it?

00:31:47.462 --> 00:31:49.462
nauseous. Uh…

00:31:50.514 --> 00:31:54.514
You already told that an event will be triggered

00:31:56.168 --> 00:32:06.168
Yes, with the webhook, it is deleted hook, it is at HTTP that notify another HTTP if any event…

00:32:06.153 --> 00:32:11.153
Or if something, it is heaven. For example, if the developers make any change in the code,

00:32:11.126 --> 00:32:13.126
They notify the…

00:32:13.619 --> 00:32:18.619
I don't guess. I don't guess or some other service, right? Yes, Jenkins, there is any…

00:32:18.730 --> 00:32:21.730
Something, yeah, I mean, having… there is a change.

00:32:21.909 --> 00:32:24.909
You should DNA. From the beginning, Danny…

00:32:25.337 --> 00:32:27.337
a ticket, and if it is success…

00:32:28.029 --> 00:32:30.029
Yeah, no, good, good, good, good, good.

00:32:29.961 --> 00:32:32.961
Okay, uh, you have seen AI agents, right, Eluba?

00:32:33.269 --> 00:32:36.269
So, what is an AI agent? What can it do that ChatGPT cannot?

00:32:38.909 --> 00:32:42.909
AI Agent, this is a nanny, like, application that, uh, make a decision.

00:32:43.947 --> 00:32:48.947
And take action automatically, and can take action automatically. Like, for example, my example?

00:32:51.659 --> 00:32:53.659
Yes, like, example of an action.

00:32:54.586 --> 00:32:57.586
what kind of action can an agent take? And, for example, make a decision.

00:32:58.384 --> 00:33:00.384
And it created a text. Okay. Like that.

00:33:04.013 --> 00:33:09.013
Yeah. HSGB is not a language model, it is like ChatGPT.

00:33:12.479 --> 00:33:14.479
Is it, for example, can again write in my texts?

00:33:15.649 --> 00:33:21.649
Again, X, it is understandable, and readable by humans. Then what is the difference?

00:33:23.764 --> 00:33:28.764
difference between them? Because you said AI agent can also, like, make decisions that ChatGPT can also.

00:33:31.365 --> 00:33:35.365
make decisions. But the AIA can't make it that automatically.

00:33:36.053 --> 00:33:39.053
Yeah, and you can make any decision.

00:33:39.755 --> 00:33:41.755
Where I can…

00:33:41.724 --> 00:33:43.724
Perform Actions can do.

00:33:44.741 --> 00:33:52.741
can perform actions, right? Yeah. But ChatGP cannot perform actions, can just tell me. Yeah, it'll just tell you. Yeah, it's just, like, communication issues. Like a text. Yeah.

00:33:52.858 --> 00:33:54.858
Early Adwa. Thank you.

00:33:55.089 --> 00:34:02.089
That's it, right? Yes. I finished your interview. So I'm going to just… actually, I will tell you something. Let me stop the recording first.

00:34:03.013 --> 00:34:05.013
Save.

